//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Navigation.Designer
{
	/// <summary>
	/// DomainClass NavigationDiagram
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Navigation.Designer.NavigationDiagram.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Navigation.Designer.NavigationDiagram.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Navigation.Designer.NavigationLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6e837751-5520-4926-8fde-c8067343fc5e")]
	public partial class NavigationDiagram : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NavigationDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6e837751, 0x5520, 0x4926, 0x8f, 0xde, 0xc8, 0x06, 0x73, 0x43, 0xfc, 0x5e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NavigationDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NavigationDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region States opposite domain role accessor
		
		/// <summary>
		/// Gets a list of States.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> States
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Navigation.Designer.NavigationDiagramHasStates.NavigationDiagramDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Navigation.Designer.State.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Navigation.Designer.State sourceState1 = sourceElement as global::Navigation.Designer.State;
			if (sourceState1 != null)
			{
				// Create link for path NavigationDiagramHasStates.States
				this.States.Add(sourceState1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Navigation.Designer.State sourceState1 = sourceElement as global::Navigation.Designer.State;
			if (sourceState1 != null)
			{
				// Delete link for path NavigationDiagramHasStates.States
				
				foreach (DslModeling::ElementLink link in global::Navigation.Designer.NavigationDiagramHasStates.GetLinks((global::Navigation.Designer.NavigationDiagram)this, sourceState1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Navigation.Designer.NavigationDiagramHasStates.NavigationDiagramDomainRoleId, global::Navigation.Designer.NavigationDiagramHasStates.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Navigation.Designer
{
	/// <summary>
	/// DomainClass State
	/// States embedded in the Diagram. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Navigation.Designer.State.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Navigation.Designer.State.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Navigation.Designer.NavigationLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Key = {keyPropertyStorage})")]
	[DslModeling::DomainObjectId("d1f7dd3e-1a13-408e-8eb3-c098629efaa6")]
	public partial class State : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// State domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd1f7dd3e, 0x1a13, 0x408e, 0x8e, 0xb3, 0xc0, 0x98, 0x62, 0x9e, 0xfa, 0xa6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Key domain property code
		
		/// <summary>
		/// Key domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyDomainPropertyId = new global::System.Guid(0xb1047807, 0x174f, 0x439c, 0x92, 0xea, 0x7e, 0x69, 0x39, 0xca, 0x0d, 0x2f);
		
		/// <summary>
		/// Storage for Key
		/// </summary>
		private global::System.String keyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Key domain property.
		/// Unique within a Dialog, used by Dialog and Transition elements to specify
		/// configuration.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Key.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Key.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Key.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("b1047807-174f-439c-92ea-7e6939ca0d2f")]
		public global::System.String Key
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Key domain property.
		/// </summary>
		internal sealed partial class KeyPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private KeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Key domain property value handler.
			/// </summary>
			public static readonly KeyPropertyHandler Instance = new KeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Key domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.keyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Page domain property code
		
		/// <summary>
		/// Page domain property Id.
		/// </summary>
		public static readonly global::System.Guid PageDomainPropertyId = new global::System.Guid(0xbc51c31b, 0xe9b1, 0x4068, 0x9d, 0x87, 0x2b, 0x2f, 0x77, 0x70, 0xfc, 0x74);
		
		/// <summary>
		/// Storage for Page
		/// </summary>
		private global::System.String pagePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Page domain property.
		/// The aspx Page to display when navigating to this State.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Page.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Page.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Page.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bc51c31b-e9b1-4068-9d87-2b2f7770fc74")]
		public global::System.String Page
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Page domain property.
		/// </summary>
		internal sealed partial class PagePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private PagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Page domain property value handler.
			/// </summary>
			public static readonly PagePropertyHandler Instance = new PagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Page domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Title domain property code
		
		/// <summary>
		/// Title domain property Id.
		/// </summary>
		public static readonly global::System.Guid TitleDomainPropertyId = new global::System.Guid(0x45e4f540, 0x55ab, 0x43a7, 0xb0, 0x40, 0xc4, 0xd2, 0xd2, 0xbe, 0x03, 0xf8);
		
		/// <summary>
		/// Storage for Title
		/// </summary>
		private global::System.String titlePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Title domain property.
		/// The textual description of the State. ResourceType and ResourceKey can be used
		/// for localization.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Title.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Title.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Title.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("45e4f540-55ab-43a7-b040-c4d2d2be03f8")]
		public global::System.String Title
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return titlePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TitlePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Title domain property.
		/// </summary>
		internal sealed partial class TitlePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private TitlePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Title domain property value handler.
			/// </summary>
			public static readonly TitlePropertyHandler Instance = new TitlePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Title domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TitleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.titlePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.titlePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Route domain property code
		
		/// <summary>
		/// Route domain property Id.
		/// </summary>
		public static readonly global::System.Guid RouteDomainPropertyId = new global::System.Guid(0xda673d43, 0x18df, 0x4880, 0x96, 0x30, 0xd4, 0x0a, 0x25, 0x6d, 0x4e, 0x18);
		
		/// <summary>
		/// Storage for Route
		/// </summary>
		private global::System.String routePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Route domain property.
		/// The route Url pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Route.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Route.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Route.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("da673d43-18df-4880-9630-d40a256d4e18")]
		public global::System.String Route
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return routePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoutePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Route domain property.
		/// </summary>
		internal sealed partial class RoutePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private RoutePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Route domain property value handler.
			/// </summary>
			public static readonly RoutePropertyHandler Instance = new RoutePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Route domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RouteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.routePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.routePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TrackCrumbTrail domain property code
		
		/// <summary>
		/// TrackCrumbTrail domain property Id.
		/// </summary>
		public static readonly global::System.Guid TrackCrumbTrailDomainPropertyId = new global::System.Guid(0x548068fa, 0x1d42, 0x479f, 0x8c, 0xe0, 0x59, 0x5b, 0x0a, 0x11, 0x6d, 0xd1);
		
		/// <summary>
		/// Storage for TrackCrumbTrail
		/// </summary>
		private global::System.Boolean trackCrumbTrailPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of TrackCrumbTrail domain property.
		/// Indicates whether to maintain crumb trail information.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/TrackCrumbTrail.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/TrackCrumbTrail.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/TrackCrumbTrail.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("548068fa-1d42-479f-8ce0-595b0a116dd1")]
		public global::System.Boolean TrackCrumbTrail
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return trackCrumbTrailPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TrackCrumbTrailPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.TrackCrumbTrail domain property.
		/// </summary>
		internal sealed partial class TrackCrumbTrailPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.Boolean>
		{
			private TrackCrumbTrailPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.TrackCrumbTrail domain property value handler.
			/// </summary>
			public static readonly TrackCrumbTrailPropertyHandler Instance = new TrackCrumbTrailPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.TrackCrumbTrail domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TrackCrumbTrailDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.trackCrumbTrailPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.trackCrumbTrailPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CheckPhysicalUrlAccess domain property code
		
		/// <summary>
		/// CheckPhysicalUrlAccess domain property Id.
		/// </summary>
		public static readonly global::System.Guid CheckPhysicalUrlAccessDomainPropertyId = new global::System.Guid(0x8cbc9cde, 0x4726, 0x4217, 0xb3, 0xe5, 0x58, 0x26, 0x8a, 0x6e, 0x77, 0x49);
		
		/// <summary>
		/// Storage for CheckPhysicalUrlAccess
		/// </summary>
		private global::System.Boolean checkPhysicalUrlAccessPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of CheckPhysicalUrlAccess domain property.
		/// Indicates whether ASP.NET should validate that the user has authority to access
		/// the physical Page.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/CheckPhysicalUrlAccess.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/CheckPhysicalUrlAccess.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/CheckPhysicalUrlAccess.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("8cbc9cde-4726-4217-b3e5-58268a6e7749")]
		public global::System.Boolean CheckPhysicalUrlAccess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return checkPhysicalUrlAccessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CheckPhysicalUrlAccessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.CheckPhysicalUrlAccess domain property.
		/// </summary>
		internal sealed partial class CheckPhysicalUrlAccessPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.Boolean>
		{
			private CheckPhysicalUrlAccessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.CheckPhysicalUrlAccess domain property value handler.
			/// </summary>
			public static readonly CheckPhysicalUrlAccessPropertyHandler Instance = new CheckPhysicalUrlAccessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.CheckPhysicalUrlAccess domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CheckPhysicalUrlAccessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.checkPhysicalUrlAccessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.checkPhysicalUrlAccessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Masters domain property code
		
		/// <summary>
		/// Masters domain property Id.
		/// </summary>
		public static readonly global::System.Guid MastersDomainPropertyId = new global::System.Guid(0xcd8585c1, 0x97a7, 0x42c1, 0x83, 0xf8, 0xb2, 0x66, 0xa6, 0x3b, 0x43, 0xe6);
		
		/// <summary>
		/// Storage for Masters
		/// </summary>
		private global::System.String mastersPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Masters domain property.
		/// The master pages to assign to the Page when displayed.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Masters.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Masters.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Masters.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cd8585c1-97a7-42c1-83f8-b266a63b43e6")]
		public global::System.String Masters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mastersPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MastersPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Masters domain property.
		/// </summary>
		internal sealed partial class MastersPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private MastersPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Masters domain property value handler.
			/// </summary>
			public static readonly MastersPropertyHandler Instance = new MastersPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Masters domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MastersDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mastersPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mastersPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Theme domain property code
		
		/// <summary>
		/// Theme domain property Id.
		/// </summary>
		public static readonly global::System.Guid ThemeDomainPropertyId = new global::System.Guid(0xa5512814, 0x95e3, 0x45e7, 0x85, 0x89, 0x2b, 0xdb, 0x19, 0xc8, 0xfc, 0x62);
		
		/// <summary>
		/// Storage for Theme
		/// </summary>
		private global::System.String themePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Theme domain property.
		/// The theme to assign to the Page when displayed.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Theme.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Theme.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Theme.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a5512814-95e3-45e7-8589-2bdb19c8fc62")]
		public global::System.String Theme
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return themePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ThemePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Theme domain property.
		/// </summary>
		internal sealed partial class ThemePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private ThemePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Theme domain property value handler.
			/// </summary>
			public static readonly ThemePropertyHandler Instance = new ThemePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Theme domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ThemeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.themePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.themePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceType domain property code
		
		/// <summary>
		/// ResourceType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResourceTypeDomainPropertyId = new global::System.Guid(0xf4231a6d, 0x3ad7, 0x493e, 0x85, 0x1c, 0x86, 0xdd, 0xc9, 0xce, 0xbe, 0xd1);
		
		/// <summary>
		/// Storage for ResourceType
		/// </summary>
		private global::System.String resourceTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ResourceType domain property.
		/// Used with ResourceKey, specifies the resource file type for State Title
		/// localization.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/ResourceType.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/ResourceType.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/ResourceType.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f4231a6d-3ad7-493e-851c-86ddc9cebed1")]
		public global::System.String ResourceType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resourceTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResourceTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.ResourceType domain property.
		/// </summary>
		internal sealed partial class ResourceTypePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private ResourceTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.ResourceType domain property value handler.
			/// </summary>
			public static readonly ResourceTypePropertyHandler Instance = new ResourceTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.ResourceType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResourceTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resourceTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resourceTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceKey domain property code
		
		/// <summary>
		/// ResourceKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResourceKeyDomainPropertyId = new global::System.Guid(0x5797b021, 0x2423, 0x419c, 0xaf, 0x55, 0xe3, 0x64, 0x33, 0x85, 0x17, 0x60);
		
		/// <summary>
		/// Storage for ResourceKey
		/// </summary>
		private global::System.String resourceKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ResourceKey domain property.
		/// Used with ResourceType, specifies the resource name for State Title
		/// localization.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/ResourceKey.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/ResourceKey.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/ResourceKey.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5797b021-2423-419c-af55-e36433851760")]
		public global::System.String ResourceKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resourceKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResourceKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.ResourceKey domain property.
		/// </summary>
		internal sealed partial class ResourceKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private ResourceKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.ResourceKey domain property value handler.
			/// </summary>
			public static readonly ResourceKeyPropertyHandler Instance = new ResourceKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.ResourceKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResourceKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resourceKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resourceKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Order domain property code
		
		/// <summary>
		/// Order domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderDomainPropertyId = new global::System.Guid(0xde7421ff, 0xb4b2, 0x435f, 0x8b, 0x0f, 0x85, 0xfb, 0xac, 0x55, 0x6e, 0x2e);
		
		/// <summary>
		/// Storage for Order
		/// </summary>
		private global::System.Int32 orderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Order domain property.
		/// The order of the State in the configuration.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Order.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Order.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Order.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("de7421ff-b4b2-435f-8b0f-85fbac556e2e")]
		public global::System.Int32 Order
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Order domain property.
		/// </summary>
		internal sealed partial class OrderPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.Int32>
		{
			private OrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Order domain property value handler.
			/// </summary>
			public static readonly OrderPropertyHandler Instance = new OrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Order domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Initial domain property code
		
		/// <summary>
		/// Initial domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialDomainPropertyId = new global::System.Guid(0xd9753c6c, 0xebd7, 0x4869, 0xb7, 0x61, 0x3c, 0xee, 0xb3, 0xe8, 0x3b, 0x7f);
		
		/// <summary>
		/// Storage for Initial
		/// </summary>
		private global::System.Boolean initialPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Initial domain property.
		/// Set to true to indicate the start of a Dialog.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Initial.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Initial.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Initial.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d9753c6c-ebd7-4869-b761-3ceeb3e83b7f")]
		public global::System.Boolean Initial
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Initial domain property.
		/// </summary>
		internal sealed partial class InitialPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.Boolean>
		{
			private InitialPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Initial domain property value handler.
			/// </summary>
			public static readonly InitialPropertyHandler Instance = new InitialPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Initial domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Path domain property code
		
		/// <summary>
		/// Path domain property Id.
		/// </summary>
		public static readonly global::System.Guid PathDomainPropertyId = new global::System.Guid(0x116601b0, 0x5dc3, 0x4d3b, 0x80, 0x07, 0x5b, 0xc9, 0x39, 0x02, 0x16, 0x22);
		
		/// <summary>
		/// Storage for Path
		/// </summary>
		private global::System.String pathPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Path domain property.
		/// The Url that will cause a navigation to this Initial State. It should not
		/// contain a query string.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Path.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Path.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Path.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("116601b0-5dc3-4d3b-8007-5bc939021622")]
		public global::System.String Path
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pathPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PathPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Path domain property.
		/// </summary>
		internal sealed partial class PathPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private PathPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Path domain property value handler.
			/// </summary>
			public static readonly PathPropertyHandler Instance = new PathPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Path domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PathDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pathPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pathPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DialogKey domain property code
		
		/// <summary>
		/// DialogKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid DialogKeyDomainPropertyId = new global::System.Guid(0x8c37b5f8, 0x5d24, 0x4776, 0x81, 0x70, 0x39, 0x8e, 0x19, 0xfd, 0x75, 0xf3);
		
		/// <summary>
		/// Storage for DialogKey
		/// </summary>
		private global::System.String dialogKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DialogKey domain property.
		/// Unique across Dialogs and passed as the action parameter to the StateController
		/// when navigating.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/DialogKey.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/DialogKey.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/DialogKey.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8c37b5f8-5d24-4776-8170-398e19fd75f3")]
		public global::System.String DialogKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dialogKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DialogKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.DialogKey domain property.
		/// </summary>
		internal sealed partial class DialogKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DialogKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.DialogKey domain property value handler.
			/// </summary>
			public static readonly DialogKeyPropertyHandler Instance = new DialogKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.DialogKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DialogKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dialogKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dialogKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DialogTitle domain property code
		
		/// <summary>
		/// DialogTitle domain property Id.
		/// </summary>
		public static readonly global::System.Guid DialogTitleDomainPropertyId = new global::System.Guid(0xf2dd42a1, 0x03c5, 0x4d4a, 0xbd, 0xad, 0x39, 0x14, 0x31, 0x69, 0x6d, 0x67);
		
		/// <summary>
		/// Storage for DialogTitle
		/// </summary>
		private global::System.String dialogTitlePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DialogTitle domain property.
		/// The textual description of the Dialog. ResourceType and ResourceKey can be used
		/// for localization.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/DialogTitle.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/DialogTitle.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/DialogTitle.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f2dd42a1-03c5-4d4a-bdad-391431696d67")]
		public global::System.String DialogTitle
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dialogTitlePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DialogTitlePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.DialogTitle domain property.
		/// </summary>
		internal sealed partial class DialogTitlePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DialogTitlePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.DialogTitle domain property value handler.
			/// </summary>
			public static readonly DialogTitlePropertyHandler Instance = new DialogTitlePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.DialogTitle domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DialogTitleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dialogTitlePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dialogTitlePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DialogResourceType domain property code
		
		/// <summary>
		/// DialogResourceType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DialogResourceTypeDomainPropertyId = new global::System.Guid(0x82321504, 0x5ffc, 0x4ee6, 0xba, 0x32, 0x04, 0xc4, 0xf5, 0xe2, 0x75, 0x68);
		
		/// <summary>
		/// Storage for DialogResourceType
		/// </summary>
		private global::System.String dialogResourceTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DialogResourceType domain property.
		/// Used with ResourceType, specifies the resource name for Dialog Title
		/// localization.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/DialogResourceType.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/DialogResourceType.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/DialogResourceType.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("82321504-5ffc-4ee6-ba32-04c4f5e27568")]
		public global::System.String DialogResourceType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dialogResourceTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DialogResourceTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.DialogResourceType domain property.
		/// </summary>
		internal sealed partial class DialogResourceTypePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DialogResourceTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.DialogResourceType domain property value handler.
			/// </summary>
			public static readonly DialogResourceTypePropertyHandler Instance = new DialogResourceTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.DialogResourceType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DialogResourceTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dialogResourceTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dialogResourceTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DialogResourceKey domain property code
		
		/// <summary>
		/// DialogResourceKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid DialogResourceKeyDomainPropertyId = new global::System.Guid(0x32d13a53, 0x1f72, 0x42dd, 0x8d, 0x25, 0x02, 0x3d, 0xd1, 0x2a, 0xed, 0x35);
		
		/// <summary>
		/// Storage for DialogResourceKey
		/// </summary>
		private global::System.String dialogResourceKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DialogResourceKey domain property.
		/// Used with ResourceKey, specifies the resource file type for Dialog Title
		/// localization.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/DialogResourceKey.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/DialogResourceKey.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/DialogResourceKey.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("32d13a53-1f72-42dd-8d25-023dd12aed35")]
		public global::System.String DialogResourceKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dialogResourceKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DialogResourceKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.DialogResourceKey domain property.
		/// </summary>
		internal sealed partial class DialogResourceKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DialogResourceKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.DialogResourceKey domain property value handler.
			/// </summary>
			public static readonly DialogResourceKeyPropertyHandler Instance = new DialogResourceKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.DialogResourceKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DialogResourceKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dialogResourceKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dialogResourceKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DialogOrder domain property code
		
		/// <summary>
		/// DialogOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid DialogOrderDomainPropertyId = new global::System.Guid(0x5960082d, 0x80c6, 0x4eb9, 0x97, 0x4e, 0x94, 0xf6, 0x8b, 0x54, 0x9b, 0x4f);
		
		/// <summary>
		/// Storage for DialogOrder
		/// </summary>
		private global::System.Int32 dialogOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DialogOrder domain property.
		/// The order of the Dialog in the configuration.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/DialogOrder.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/DialogOrder.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/DialogOrder.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5960082d-80c6-4eb9-974e-94f68b549b4f")]
		public global::System.Int32 DialogOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dialogOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DialogOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.DialogOrder domain property.
		/// </summary>
		internal sealed partial class DialogOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.Int32>
		{
			private DialogOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.DialogOrder domain property value handler.
			/// </summary>
			public static readonly DialogOrderPropertyHandler Instance = new DialogOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.DialogOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DialogOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dialogOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dialogOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobilePage domain property code
		
		/// <summary>
		/// MobilePage domain property Id.
		/// </summary>
		public static readonly global::System.Guid MobilePageDomainPropertyId = new global::System.Guid(0xc6ae86e2, 0xba7c, 0x4462, 0x9c, 0x82, 0x6a, 0xd6, 0x26, 0xce, 0xbb, 0x7c);
		
		/// <summary>
		/// Storage for MobilePage
		/// </summary>
		private global::System.String mobilePagePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of MobilePage domain property.
		/// The aspx page to display for a mobile device navigating to this State.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/MobilePage.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/MobilePage.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/MobilePage.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c6ae86e2-ba7c-4462-9c82-6ad626cebb7c")]
		public global::System.String MobilePage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mobilePagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MobilePagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.MobilePage domain property.
		/// </summary>
		internal sealed partial class MobilePagePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private MobilePagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.MobilePage domain property value handler.
			/// </summary>
			public static readonly MobilePagePropertyHandler Instance = new MobilePagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.MobilePage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MobilePageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mobilePagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mobilePagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileRoute domain property code
		
		/// <summary>
		/// MobileRoute domain property Id.
		/// </summary>
		public static readonly global::System.Guid MobileRouteDomainPropertyId = new global::System.Guid(0xbba97d48, 0xf1a6, 0x4b8c, 0xb7, 0x54, 0xb9, 0x25, 0x06, 0x08, 0x4d, 0x1f);
		
		/// <summary>
		/// Storage for MobileRoute
		/// </summary>
		private global::System.String mobileRoutePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of MobileRoute domain property.
		/// The mobile device route Url pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/MobileRoute.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/MobileRoute.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/MobileRoute.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bba97d48-f1a6-4b8c-b754-b92506084d1f")]
		public global::System.String MobileRoute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mobileRoutePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MobileRoutePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.MobileRoute domain property.
		/// </summary>
		internal sealed partial class MobileRoutePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private MobileRoutePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.MobileRoute domain property value handler.
			/// </summary>
			public static readonly MobileRoutePropertyHandler Instance = new MobileRoutePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.MobileRoute domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MobileRouteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mobileRoutePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mobileRoutePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileTheme domain property code
		
		/// <summary>
		/// MobileTheme domain property Id.
		/// </summary>
		public static readonly global::System.Guid MobileThemeDomainPropertyId = new global::System.Guid(0xae7d5fa8, 0x196e, 0x4e09, 0xac, 0x1a, 0x08, 0x26, 0x0c, 0x24, 0xd7, 0x4a);
		
		/// <summary>
		/// Storage for MobileTheme
		/// </summary>
		private global::System.String mobileThemePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of MobileTheme domain property.
		/// The theme to assign to the Page when displayed for a mobile device.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/MobileTheme.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/MobileTheme.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/MobileTheme.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ae7d5fa8-196e-4e09-ac1a-08260c24d74a")]
		public global::System.String MobileTheme
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mobileThemePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MobileThemePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.MobileTheme domain property.
		/// </summary>
		internal sealed partial class MobileThemePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private MobileThemePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.MobileTheme domain property value handler.
			/// </summary>
			public static readonly MobileThemePropertyHandler Instance = new MobileThemePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.MobileTheme domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MobileThemeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mobileThemePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mobileThemePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileMasters domain property code
		
		/// <summary>
		/// MobileMasters domain property Id.
		/// </summary>
		public static readonly global::System.Guid MobileMastersDomainPropertyId = new global::System.Guid(0xcad0a9a7, 0xeb8d, 0x4078, 0xa0, 0xd7, 0xfd, 0x1a, 0x89, 0xa3, 0xa6, 0x4c);
		
		/// <summary>
		/// Storage for MobileMasters
		/// </summary>
		private global::System.String mobileMastersPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of MobileMasters domain property.
		/// The master pages to assign to the Page when displayed for a mobile device.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/MobileMasters.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/MobileMasters.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/MobileMasters.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cad0a9a7-eb8d-4078-a0d7-fd1a89a3a64c")]
		public global::System.String MobileMasters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return mobileMastersPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MobileMastersPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.MobileMasters domain property.
		/// </summary>
		internal sealed partial class MobileMastersPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private MobileMastersPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.MobileMasters domain property value handler.
			/// </summary>
			public static readonly MobileMastersPropertyHandler Instance = new MobileMastersPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.MobileMasters domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MobileMastersDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.mobileMastersPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.mobileMastersPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Defaults domain property code
		
		/// <summary>
		/// Defaults domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultsDomainPropertyId = new global::System.Guid(0xe0c21f3b, 0x9895, 0x4a3e, 0x83, 0x6e, 0x7b, 0x42, 0xd3, 0xda, 0xa0, 0xf5);
		
		/// <summary>
		/// Storage for Defaults
		/// </summary>
		private global::System.String defaultsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Defaults domain property.
		/// The default NavigationData for this State.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Defaults.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Defaults.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Defaults.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e0c21f3b-9895-4a3e-836e-7b42d3daa0f5")]
		public global::System.String Defaults
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Defaults domain property.
		/// </summary>
		internal sealed partial class DefaultsPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DefaultsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Defaults domain property value handler.
			/// </summary>
			public static readonly DefaultsPropertyHandler Instance = new DefaultsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Defaults domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultTypes domain property code
		
		/// <summary>
		/// DefaultTypes domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultTypesDomainPropertyId = new global::System.Guid(0xe328f1c5, 0x4344, 0x4f4f, 0xbe, 0x2f, 0x23, 0xf3, 0x28, 0x16, 0x91, 0x64);
		
		/// <summary>
		/// Storage for DefaultTypes
		/// </summary>
		private global::System.String defaultTypesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultTypes domain property.
		/// The default types of NavigationData for this State.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/DefaultTypes.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/DefaultTypes.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/DefaultTypes.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e328f1c5-4344-4f4f-be2f-23f328169164")]
		public global::System.String DefaultTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultTypesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultTypesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.DefaultTypes domain property.
		/// </summary>
		internal sealed partial class DefaultTypesPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DefaultTypesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.DefaultTypes domain property value handler.
			/// </summary>
			public static readonly DefaultTypesPropertyHandler Instance = new DefaultTypesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.DefaultTypes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultTypesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultTypesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultTypesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Derived domain property code
		
		/// <summary>
		/// Derived domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivedDomainPropertyId = new global::System.Guid(0x1e7e5ad7, 0x50e2, 0x45da, 0xa2, 0xaf, 0x7d, 0x93, 0x2a, 0xdc, 0xd8, 0xe0);
		
		/// <summary>
		/// Storage for Derived
		/// </summary>
		private global::System.String derivedPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Derived domain property.
		/// The derived NavigationData for this State.
		/// </summary>
		[DslDesign::DisplayNameResource("Navigation.Designer.State/Derived.DisplayName", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Navigation.Designer.State/Derived.Category", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Navigation.Designer.State/Derived.Description", typeof(global::Navigation.Designer.NavigationLanguageDomainModel), "Navigation.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1e7e5ad7-50e2-45da-a2af-7d932adcd8e0")]
		public global::System.String Derived
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Derived domain property.
		/// </summary>
		internal sealed partial class DerivedPropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private DerivedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Derived domain property value handler.
			/// </summary>
			public static readonly DerivedPropertyHandler Instance = new DerivedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Derived domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NavigationDiagram opposite domain role accessor
		/// <summary>
		/// Gets or sets NavigationDiagram.
		/// </summary>
		public virtual NavigationDiagram NavigationDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Navigation.Designer.NavigationDiagramHasStates.ElementDomainRoleId) as NavigationDiagram;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Navigation.Designer.NavigationDiagramHasStates.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Successors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Successors.
		/// Description for Navigation.Designer.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> Successors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Navigation.Designer.Transition.PredecessorDomainRoleId);
			}
		}
		#endregion
		#region Predecessors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Predecessors.
		/// Description for Navigation.Designer.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> Predecessors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Navigation.Designer.Transition.SuccessorDomainRoleId);
			}
		}
		#endregion
	}
}
