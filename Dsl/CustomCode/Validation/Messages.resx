<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DialogKeyEmpty" xml:space="preserve">
    <value>DialogKey is mandatory for State '{0}'. Any State marked as Initial becomes a Dialog during StateInfo conversion.</value>
  </data>
  <data name="DialogPathInvalid" xml:space="preserve">
    <value>Path is invalid for State '{0}' because it must end with '.aspx' and be made relative using the tilde (~) notation for the application root e.g. '~/Page.aspx'.</value>
  </data>
  <data name="DialogResourceInvalid" xml:space="preserve">
    <value>DialogResourceType and DialogResourceKey are invalid for State '{0}'. They must either both be populated or both be blank because these are used to localize the Dialog Title.</value>
  </data>
  <data name="DialogTitleAndResourceInvalid" xml:space="preserve">
    <value>DialogResourceType, DialogResourceKey and DialogTitle are invalid for State '{0}'. If DialogResourceType or DialogResourceKey are populated then DialogTitle should be blank and vice versa.</value>
  </data>
  <data name="DuplicateDialogKey" xml:space="preserve">
    <value>Multiple Dialogs exist with same DialogKey of '{0}'.</value>
  </data>
  <data name="DuplicateStateKey" xml:space="preserve">
    <value>Multiple States exist within Dialog '{0}' with Key '{1}'.</value>
  </data>
  <data name="DuplicateTransitionKey" xml:space="preserve">
    <value>Multiple Transitions exist from State '{0}' with Key '{1}'.</value>
  </data>
  <data name="PathAndRouteEmpty" xml:space="preserve">
    <value>Either Path or Route must be set for at least one Dialog/Initial State otherwise a start page or url cannot be specified.</value>
  </data>
  <data name="StateDefaultsInvalid" xml:space="preserve">
    <value>Defaults is invalid for State '{0}' because it must be in the format Key1=Value1,Key2?type=Value2.</value>
  </data>
  <data name="StateDefaultTypesInvalid" xml:space="preserve">
    <value>DefaultTypes is invalid for State '{0}' because it must be in the format Key1=type1,Key2=type2.</value>
  </data>
  <data name="StateDialogNotInitial" xml:space="preserve">
    <value>Initial should be set to true for State '{0}' because the StateInfo conversion has made it a Dialog.</value>
  </data>
  <data name="StateKeyEmpty" xml:space="preserve">
    <value>Key is mandatory for State because it is used by Dialog and Transition elements to specify configuration.</value>
  </data>
  <data name="StateMastersInvalid" xml:space="preserve">
    <value>Masters is invalid for State '{0}'. It must be a comma separated list of master pages, each must end with '.master' and be made relative using the tilde (~) notation for the application root e.g. 'Site1.master,Site2.master'</value>
  </data>
  <data name="StateMobileMastersInvalid" xml:space="preserve">
    <value>MobileMasters is invalid for State '{0}'. It must be a comma separated list of master pages, each must end with '.master' and be made relative using the tilde (~) notation for the application root e.g. 'Site1.master,Site2.master'</value>
  </data>
  <data name="StateMobilePageInvalid" xml:space="preserve">
    <value>MobilePage  is invalid for State '{0}' because it must end with '.aspx' and be made relative using the tilde (~) notation for the application root e.g. '~/Page.aspx'.</value>
  </data>
  <data name="StatePageEmpty" xml:space="preserve">
    <value>Page is mandatory for State '{0}' because it is the aspx page to display when navigating.</value>
  </data>
  <data name="StatePageInvalid" xml:space="preserve">
    <value>Page  is invalid for State '{0}' because it must end with '.aspx' and be made relative using the tilde (~) notation for the application root e.g. '~/Page.aspx'.</value>
  </data>
  <data name="StateResourceInvalid" xml:space="preserve">
    <value>ResourceType and ResourceKey are invalid for State '{0}'. They must either both be populated or both be blank because these are used to localize the State Title.</value>
  </data>
  <data name="StateRouteInvalid" xml:space="preserve">
    <value>State '{0}' has been added to multiple Dialogs by the StateInfo conversion, but its Route has only been used in one of them.</value>
  </data>
  <data name="StateTitleAndResourceInvalid" xml:space="preserve">
    <value>ResourceType, ResourceKey and Title are invalid for State '{0}'. If ResourceType or ResourceKey are populated then Title should be blank and vice versa.</value>
  </data>
  <data name="TransitionKeyEmpty" xml:space="preserve">
    <value>Key is mandatory for Transition.</value>
  </data>
  <data name="TransitionWithBackToNoTrackState" xml:space="preserve">
    <value>CanNavigateBack is invalid for Transition '{0}' to State '{1}'. A State with TrackCrumbTrail set to false does not support back navigation.</value>
  </data>
  <data name="TransitionWithoutBackToInitialState" xml:space="preserve">
    <value>Transition '{0}' to State '{1}' is not required. A State marked as Initial becomes a Dialog during StateInfo conversion so a Transition with CanNavigateBack set to false is redundant.</value>
  </data>
</root>