<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".StateInfo.config" #>
<#@ NavigationLanguage processor="NavigationLanguageDirectiveProcessor" requires="fileName='[filename]'" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Web.dll" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Web" #>
<# 
	WriteLine("<StateInfo>");
	PushIndent("\t");
		WriteLine("<!--");
		PushIndent("\t");
			WriteLine("StateInfo generated by the Navigation Designer for use within ");
			WriteLine("the Navigation framework.");
			WriteLine("1. Documentation for the Navigation framework can be found at:");
			WriteLine("http://navigation.codeplex.com/documentation");
			WriteLine("2. Documentation for the Navigation Designer can be found at:");
			WriteLine("http://navigationdesigner.codeplex.com/documentation");
		PopIndent();
		WriteLine("-->");
	foreach (Dialog dialog in new StateInfo().Convert(NavigationDiagram).OrderBy(d => d.Order))
	{
		Write("<dialog");
		AddAttribute("key", dialog.Key);
		AddAttribute("initial", dialog.Initial.Key);
		AddAttribute("title", dialog.Title);
		AddAttribute("resourceType", dialog.ResourceType);
		AddAttribute("resourceKey", dialog.ResourceKey);
		AddAttribute("path", dialog.Path);
		WriteLine(">");
		PushIndent("\t");
		foreach (StateWrapper state in dialog.States.OrderBy(s => s.Order))
		{
			Write("<state");
			AddAttribute("key", state.Key);
			AddAttribute("page", state.Page);
			AddAttribute("title", state.Title);
			AddAttribute("route", state.Route);
			AddAttribute("trackCrumbTrail", !state.TrackCrumbTrail ? "false" : null);
			AddAttribute("checkPhysicalUrlAccess", !state.CheckPhysicalUrlAccess ? "false" : null);
			AddAttribute("resourceType", state.ResourceType);
			AddAttribute("resourceKey", state.ResourceKey);
			AddAttribute("theme", state.Theme);
			AddAttribute("masters", state.Masters);
			AddAttribute("mobilePage", state.MobilePage);
			AddAttribute("mobileRoute", state.MobileRoute);
			AddAttribute("mobileTheme", state.MobileTheme);
			AddAttribute("mobileMasters", state.MobileMasters);
			AddAttribute("defaults", state.Defaults);
			AddAttribute("defaultTypes", state.DefaultTypes);
			AddAttribute("derived", state.Derived);
			if (state.Transitions.Count == 0) Write("/");
			WriteLine(">");
			PushIndent("\t");
			foreach (TransitionWrapper transition in state.Transitions.OrderBy(t => t.Order))
			{
				Write("<transition");
				AddAttribute("key", transition.Key);
				AddAttribute("to", transition.To.Key);
				WriteLine("/>");
			}
			PopIndent();
			if (state.Transitions.Count > 0) WriteLine("</state>");
		}
		PopIndent();
		WriteLine("</dialog>");
	}
	PopIndent();
	WriteLine("</StateInfo>");
#>
<#+
	string att = " {0}=\"{1}\"";
	void AddAttribute(string key, string val)
	{
		if (!string.IsNullOrEmpty(val))
			Write(string.Format(att, key, HttpUtility.HtmlAttributeEncode(val)));
	}
#>
