using Navigation.Properties;
using System;
using System.CodeDom;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Compilation;
using System.Web.UI;

namespace Navigation
{
	/// <summary>
	/// Allows <see cref="System.Web.UI.Control"/> properties to be set from <see cref="Navigation.NavigationData"/>
	/// using just markup
	/// </summary>
	public class NavigationDataControlBuilderInterceptor : ControlBuilderInterceptor
	{
		private static Regex _NavigationDataBindingExpression = new Regex(@"^\s*\{\s*NavigationData\s+(?<key>[^\s]+.*)\}\s*$");

		/// <summary>
		/// Called before the <see cref="System.Web.UI.ControlBuilder"/> of an element in the markup is initialized
		/// </summary>
		/// <param name="controlBuilder">The control builder which is about to be initialized</param>
		/// <param name="parser">The <see cref="System.Web.UI.TemplateParser"/> which was used to parse the markup</param>
		/// <param name="parentBuilder">The parent control builder</param>
		/// <param name="type">The type of the control that this builder will create</param>
		/// <param name="tagName">The name of the tag to be built</param>
		/// <param name="id">The ID of the element in the markup</param>
		/// <param name="attributes">The list of attributes of the element in the markup</param>
		/// <param name="additionalState">The additional state which can be used to store and retrieve data within
		/// several methods of the <see cref="System.Web.Compilation.ControlBuilderInterceptor"/> class</param>
		public override void PreControlBuilderInit(ControlBuilder controlBuilder, TemplateParser parser, ControlBuilder parentBuilder, Type type, string tagName, string id, IDictionary attributes, IDictionary additionalState)
		{
			if (attributes != null)
			{
				Match navigationDataBindingMatch;
				Dictionary<string, string> navigationDataBindings = new Dictionary<string, string>();
				foreach (DictionaryEntry entry in attributes)
				{
					navigationDataBindingMatch = _NavigationDataBindingExpression.Match((string)entry.Value);
					if (navigationDataBindingMatch.Success)
					{
						navigationDataBindings.Add((string)entry.Key, navigationDataBindingMatch.Groups["key"].Value.Trim());
					}
				}
				if (navigationDataBindings.Count > 0)
				{
					additionalState.Add("___NavigationData", navigationDataBindings);
					foreach (string key in navigationDataBindings.Keys)
						attributes.Remove(key);
				}
			}
		}

		/// <summary>
		/// Called after the <see cref="System.Web.UI.ControlBuilder"/> has completed generating code
		/// </summary>
		/// <param name="controlBuilder">The control builder instance</param>
		/// <param name="codeCompileUnit">A <see cref="System.CodeDom.CodeCompileUnit"/> object that is generated by the compilation</param>
		/// <param name="baseType">The type declaration of the code behind class or derived type</param>
		/// <param name="derivedType">The type declaration of top level markup element</param>
		/// <param name="buildMethod">The method with the necessary code to create the control and set the control's
		/// various properties, events, fields</param>
		/// <param name="dataBindingMethod">The method with code to evaluate data binding expressions within the control</param>
		/// <param name="additionalState">The additional state which can be used to store and retrieve data within
		/// several methods of the <see cref="System.Web.Compilation.ControlBuilderInterceptor"/> class</param>
		public override void OnProcessGeneratedCode(ControlBuilder controlBuilder, CodeCompileUnit codeCompileUnit, CodeTypeDeclaration baseType, CodeTypeDeclaration derivedType, CodeMemberMethod buildMethod, CodeMemberMethod dataBindingMethod, IDictionary additionalState)
		{
			if (buildMethod == null)
				return;
			Dictionary<string, string> navigationDataBindings = additionalState["___NavigationData"] as Dictionary<string, string>;
			if (navigationDataBindings == null)
				return;
			CodeLinePragma linePragma = null;
			foreach (CodeStatement statement in buildMethod.Statements)
			{
				if (statement.LinePragma != null)
					linePragma = statement.LinePragma;
			}
			CodeObjectCreateExpression navigationDataCreate = new CodeObjectCreateExpression(new CodeTypeReference("@___NavigationData" + controlBuilder.ID), new CodeExpression[] { new CodeVariableReferenceExpression("@__ctrl") });
			CodeVariableDeclarationStatement navigationDataVariable = new CodeVariableDeclarationStatement(new CodeTypeReference("@___NavigationData" + controlBuilder.ID), "@___navigationData", navigationDataCreate);
			navigationDataVariable.LinePragma = linePragma;
			buildMethod.Statements.Insert(buildMethod.Statements.Count - 1, navigationDataVariable);
			derivedType.Members.Add(BuildNavigationDataClass(controlBuilder, linePragma, navigationDataBindings, buildMethod));
		}

		private static CodeTypeDeclaration BuildNavigationDataClass(ControlBuilder controlBuilder, CodeLinePragma linePragma, Dictionary<string, string> navigationDataBindings, CodeMemberMethod buildMethod)
		{
			CodeTypeDeclaration navigationDataClass = new CodeTypeDeclaration("@___NavigationData" + controlBuilder.ID);
			CodeAttributeDeclaration nonUserCodeAttribute = new CodeAttributeDeclaration(new CodeTypeReference(typeof(DebuggerNonUserCodeAttribute), CodeTypeReferenceOptions.GlobalReference));
			CodeConstructor constructor = new CodeConstructor();
			constructor.Attributes = MemberAttributes.Public;
			constructor.CustomAttributes.Add(nonUserCodeAttribute);
			constructor.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(controlBuilder.ControlType, CodeTypeReferenceOptions.GlobalReference), "control"));
			constructor.Statements.Add(new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_Control"), new CodeVariableReferenceExpression("control")));
			constructor.Statements[0].LinePragma = linePragma;
			navigationDataClass.Members.Add(constructor);
			CodeMemberField controlField = new CodeMemberField(new CodeTypeReference(controlBuilder.ControlType, CodeTypeReferenceOptions.GlobalReference), "_Control");
			navigationDataClass.Members.Add(controlField);
			CodePropertyReferenceExpression navigationData = new CodePropertyReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(StateContext), CodeTypeReferenceOptions.GlobalReference)), "Data");
			CodeMemberMethod controlLoadListener = ConfigureListener("Control_Load", nonUserCodeAttribute);
			CodeMemberMethod pageLoadCompleteListener = ConfigureListener("Page_LoadComplete", nonUserCodeAttribute);
			CodeMemberMethod pagePreRenderCompleteListener = ConfigureListener("Page_PreRenderComplete", nonUserCodeAttribute);
			foreach (KeyValuePair<string, string> pair in navigationDataBindings)
			{
				if (!BuildNavigationDataEventListener(controlBuilder, pair, navigationData, navigationDataClass, nonUserCodeAttribute, linePragma, buildMethod))
					BuildNavigationDataStatements(controlBuilder, pair, navigationData, controlLoadListener, pageLoadCompleteListener, pagePreRenderCompleteListener, linePragma);
			}
			AttachEvent(false, controlLoadListener, "Load", typeof(EventHandler), linePragma, buildMethod, navigationDataClass);
			AttachEvent(true, pageLoadCompleteListener, "LoadComplete", typeof(EventHandler), linePragma, buildMethod, navigationDataClass);
			AttachEvent(true, pagePreRenderCompleteListener, "PreRenderComplete", typeof(EventHandler), linePragma, buildMethod, navigationDataClass);
			return navigationDataClass;
		}

		private static CodeMemberMethod ConfigureListener(string name, CodeAttributeDeclaration nonUserCodeAttribute)
		{
			CodeMemberMethod listener = new CodeMemberMethod();
			listener.Name = name;
			listener.Attributes = MemberAttributes.Public | MemberAttributes.Final;
			listener.CustomAttributes.Add(nonUserCodeAttribute);
			listener.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(object), CodeTypeReferenceOptions.GlobalReference), "sender"));
			listener.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(EventArgs), CodeTypeReferenceOptions.GlobalReference), "e"));
			return listener;
		}

		private static bool BuildNavigationDataEventListener(ControlBuilder controlBuilder, KeyValuePair<string, string> pair, CodePropertyReferenceExpression navigationData, CodeTypeDeclaration navigationDataClass, CodeAttributeDeclaration nonUserCodeAttribute, CodeLinePragma linePragma, CodeMemberMethod buildMethod)
		{
			if (!pair.Key.StartsWith("On", StringComparison.OrdinalIgnoreCase))
				return false;
			EventInfo eventInfo = controlBuilder.ControlType.GetEvent(pair.Key.Substring(2), BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public);
			if (eventInfo != null)
			{
				CodeMemberMethod listener = new CodeMemberMethod();
				listener.Name = "@__ctrl_" + eventInfo.Name;
				listener.Attributes = MemberAttributes.Public | MemberAttributes.Final;
				listener.CustomAttributes.Add(nonUserCodeAttribute);
				ParameterInfo[] parameters = eventInfo.EventHandlerType.GetMethod("Invoke").GetParameters();
				foreach (ParameterInfo parameter in parameters)
				{
					listener.Parameters.Add(new CodeParameterDeclarationExpression(new CodeTypeReference(parameter.ParameterType, CodeTypeReferenceOptions.GlobalReference), parameter.Name));
				}
				CodeBinaryOperatorExpression navigationDataNegation = new CodeBinaryOperatorExpression(GetNavigationDataAsType(typeof(bool), navigationData, pair), CodeBinaryOperatorType.IdentityEquality, new CodePrimitiveExpression(false));
				listener.Statements.Add(new CodeAssignStatement(GetNavigationDataAsType(null, navigationData, pair), navigationDataNegation));
				listener.Statements[0].LinePragma = linePragma;
				AttachEvent(false, listener, eventInfo.Name, eventInfo.EventHandlerType, linePragma, buildMethod, navigationDataClass);
				return true;
			}
			return false;
		}

		private static void BuildNavigationDataStatements(ControlBuilder controlBuilder, KeyValuePair<string, string> pair, CodePropertyReferenceExpression navigationData, CodeMemberMethod controlLoadListener, CodeMemberMethod pageLoadCompleteListener, CodeMemberMethod pagePreRenderCompleteListener, CodeLinePragma linePragma)
		{
			bool enabledOrVisible = StringComparer.InvariantCultureIgnoreCase.Compare(pair.Key, "Enabled") == 0 || StringComparer.InvariantCultureIgnoreCase.Compare(pair.Key, "Visible") == 0;
			CodeStatement controlNavigationDataAssign = GetNavigationDataAssign(controlBuilder, navigationData, pair);
			if (controlNavigationDataAssign != null)
			{
				controlNavigationDataAssign.LinePragma = linePragma;
				if (enabledOrVisible)
				{
					controlLoadListener.Statements.Add(controlNavigationDataAssign);
					pageLoadCompleteListener.Statements.Add(controlNavigationDataAssign);
				}
				else
					pagePreRenderCompleteListener.Statements.Add(controlNavigationDataAssign);
			}
			else
			{
				if (controlBuilder.ControlType.GetProperty(pair.Key, BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) != null)
					throw new HttpParseException(string.Format(CultureInfo.CurrentCulture, Resources.PropertyReadOnly, pair.Key), null, controlBuilder.PageVirtualPath, null, linePragma.LineNumber);
				throw new HttpParseException(string.Format(CultureInfo.CurrentCulture, Resources.PropertyMissing, controlBuilder.ControlType, pair.Key), null, controlBuilder.PageVirtualPath, null, linePragma.LineNumber);
			}
		}

		private static CodeStatement GetNavigationDataAssign(ControlBuilder controlBuilder, CodePropertyReferenceExpression navigationData, KeyValuePair<string, string> pair)
		{
			PropertyInfo property = controlBuilder.ControlType.GetProperty(pair.Key, BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public);
			if (property != null && property.CanWrite)
			{
				CodePropertyReferenceExpression controlProperty = new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_Control"), property.Name);
				return new CodeAssignStatement(controlProperty, GetNavigationDataAsType(property.PropertyType, navigationData, pair));
			}
			FieldInfo field = controlBuilder.ControlType.GetField(pair.Key, BindingFlags.IgnoreCase | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public);
			if (field != null)
			{
				CodeFieldReferenceExpression controlField = new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_Control"), field.Name);
				return new CodeAssignStatement(controlField, GetNavigationDataAsType(field.FieldType, navigationData, pair));
			}
			if (typeof(IAttributeAccessor).IsAssignableFrom(controlBuilder.ControlType))
			{
				CodeCastExpression attributeAccessor = new CodeCastExpression(new CodeTypeReference(typeof(IAttributeAccessor), CodeTypeReferenceOptions.GlobalReference), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_Control"));
				CodeExpression[] setAttributeParams = new CodeExpression[] { new CodePrimitiveExpression(pair.Key), GetNavigationDataAsType(typeof(string), navigationData, pair) };
				return new CodeExpressionStatement(new CodeMethodInvokeExpression(attributeAccessor, "SetAttribute", setAttributeParams));
			}
			return null;
		}

		private static CodeExpression GetNavigationDataAsType(Type type, CodePropertyReferenceExpression navigationData, KeyValuePair<string, string> pair)
		{
			int commaIndex = pair.Value.IndexOf(",");
			string navigationDataKey = commaIndex <= 0 ? pair.Value : pair.Value.Substring(0, commaIndex).Trim();
			CodeIndexerExpression navigationDataIndexer = new CodeIndexerExpression(navigationData, new CodePrimitiveExpression(navigationDataKey));
			if (type == typeof(string))
			{
				CodePropertyReferenceExpression currentCulture = new CodePropertyReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(CultureInfo), CodeTypeReferenceOptions.GlobalReference)), "CurrentCulture");
				if (commaIndex <= 0)
					return new CodeMethodInvokeExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(Convert), CodeTypeReferenceOptions.GlobalReference)), "ToString", new CodeExpression[] { navigationDataIndexer, currentCulture });
				else
					return new CodeMethodInvokeExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string), CodeTypeReferenceOptions.GlobalReference)), "Format", new CodeExpression[] { currentCulture, new CodePrimitiveExpression(pair.Value.Substring(commaIndex + 1).Trim()), navigationDataIndexer });
			}
			else
			{
				if (type != null)
					return new CodeCastExpression(new CodeTypeReference(type, CodeTypeReferenceOptions.GlobalReference), navigationDataIndexer);
			}
			return navigationDataIndexer;
		}

		private static void AttachEvent(bool page, CodeMemberMethod listener, string name, Type eventHandlerType, CodeLinePragma linePragma, CodeMemberMethod buildMethod, CodeTypeDeclaration navigationDataClass)
		{
			if (listener.Statements.Count > 0)
			{
				navigationDataClass.Members.Add(listener);
				CodeDelegateCreateExpression navigationDataDelegate = new CodeDelegateCreateExpression(new CodeTypeReference(eventHandlerType, CodeTypeReferenceOptions.GlobalReference), new CodeVariableReferenceExpression("@___navigationData"), listener.Name);
				CodeExpression expression;
				if (page)
					expression = new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Page");
				else
					expression = new CodeVariableReferenceExpression("@__ctrl");
				CodeAttachEventStatement pageAttachEvent = new CodeAttachEventStatement(expression, name, navigationDataDelegate);
				pageAttachEvent.LinePragma = linePragma;
				buildMethod.Statements.Insert(buildMethod.Statements.Count - 1, pageAttachEvent);
			}
		}
	}
}
